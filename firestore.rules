rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Un utilisateur peut lire son propre profil.
      // Un manager peut lire les profils des utilisateurs qui ont cet UID de manager dans leur champ managerId.
      // Un admin peut lire tous les profils (si le rôle admin est implémenté et vérifié).
      allow read: if request.auth.uid == userId ||
                     (request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager' &&
                      resource.data.managerId == request.auth.uid
                     ) ||
                     (request.auth.uid != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                     );

      allow create: if request.auth.uid == userId && 
                       !exists(/databases/$(database)/documents/users/$(userId));
      
      allow update: if request.auth.uid == userId &&
                       // L'utilisateur ne peut pas changer son rôle, managerId, ou teamId lui-même.
                       !(request.resource.data.role != resource.data.role ||
                         ('managerId' in request.resource.data && request.resource.data.managerId != resource.data.managerId) ||
                         ('teamId' in request.resource.data && request.resource.data.teamId != resource.data.teamId)
                       );
      // La suppression de profil utilisateur est généralement gérée par des fonctions admin.
      // allow delete: if false; 
    }

    match /simulations/{simulationId} {
      allow create: if request.auth.uid == request.resource.data.userId &&
                       // Vérifier que les champs d'identification ne sont pas falsifiés
                       request.resource.data.userId == request.auth.uid &&
                       // Si managerId est fourni, il doit correspondre à celui du profil de l'utilisateur qui crée
                       (!('managerId' in request.resource.data) || request.resource.data.managerId == null || request.resource.data.managerId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerId) &&
                       // Si teamId est fourni, il doit correspondre à celui du profil de l'utilisateur qui crée
                       (!('teamId' in request.resource.data) || request.resource.data.teamId == null || request.resource.data.teamId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId);

      allow read: if request.auth.uid != null && (
                    // L'utilisateur peut lire ses propres simulations
                    request.auth.uid == resource.data.userId ||
                    // Un manager peut lire les simulations des membres de son équipe
                    (
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager' &&
                      resource.data.managerId == request.auth.uid
                    ) ||
                    // Un admin peut lire toutes les simulations
                    (
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                    )
                  );

      allow update, delete: if request.auth.uid == resource.data.userId;
    }
  }
}
