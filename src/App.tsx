import React, { useState, useEffect } from 'react'; // Ajout de useEffect
import './App.css';
import ScenarioSelection from './components/ScenarioSelection';
import SimulationControls from './components/SimulationControls';
import ConversationView from './components/ConversationView';
import ResultsView from './components/ResultsView';
import useSpeechRecognition from './hooks/useSpeechRecognition'; // Import du hook

// D√©finition du type pour un sc√©nario
export interface Scenario {
  id: string;
  title: string;
  description: string;
  // promptInitialIA?: string; // Pour plus tard
}

// Donn√©es des sc√©narios (pourraient √™tre dans un fichier s√©par√© plus tard)
const scenariosData: Scenario[] = [
  { id: 'hesitant', title: 'Client H√©sitant', description: 'Le client montre de l\'int√©r√™t mais exprime des doutes et a besoin d\'√™tre rassur√©.' },
  { id: 'pressed', title: 'Client Press√©', description: 'Le client a peu de temps et veut aller droit au but.' },
  { id: 'curious', title: 'Client Curieux', description: 'Le client pose beaucoup de questions techniques et de d√©tail.' },
  { id: 'budget', title: 'Client Sensible au Prix', description: 'Le client est tr√®s concern√© par le budget et cherche la meilleure offre.' },
];

// D√©finition du type pour un message de conversation
export interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
}

function App() {
  const [scenarios] = useState<Scenario[]>(scenariosData);
  const [selectedScenario, setSelectedScenario] = useState<Scenario | null>(null);
  const [conversation, setConversation] = useState<Message[]>([]);
  const [isSimulationRunning, setIsSimulationRunning] = useState(false);
  const [isAiResponding, setIsAiResponding] = useState(false); // Nouvel √©tat
  const [apiError, setApiError] = useState<string | null>(null);   // Nouvel √©tat

  // Fonction pour appeler le backend et obtenir la r√©ponse de l'IA
  const getAiResponse = async (userMessageText: string, currentConversation: Message[]) => {
    if (!selectedScenario) return;

    setIsAiResponding(true);
    setApiError(null);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userTranscript: userMessageText,
          scenario: selectedScenario,
          conversationHistory: currentConversation.slice(0, -1) // Envoyer l'historique SANS le dernier message utilisateur actuel
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      if (data.aiResponse) {
        const aiMessage: Message = { id: Date.now().toString() + '_ai', text: data.aiResponse, sender: 'ai' };
        setConversation(prev => [...prev, aiMessage]);
      }
    } catch (error) {
      console.error("Erreur lors de l'appel √† /api/chat:", error);
      let errorMessage = "Une erreur inconnue est survenue lors de la communication avec l'IA.";
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      setApiError(errorMessage);
    } finally {
      setIsAiResponding(false);
    }
  };
  
  const handleSpeechResult = (finalTranscript: string) => {
    console.log("Transcription finale re√ßue:", finalTranscript);
    const trimmedTranscript = finalTranscript.trim();
    if (trimmedTranscript) {
      // Ajoute le message utilisateur √† la conversation, PUIS appelle l'IA
      // Il faut passer la conversation *apr√®s* l'ajout du message utilisateur pour l'historique correct
      setConversation(prevConversation => {
        const userMessage: Message = { id: Date.now().toString() + '_user', text: trimmedTranscript, sender: 'user' };
        const newConversation = [...prevConversation, userMessage];
        getAiResponse(trimmedTranscript, newConversation); // Passer la nouvelle conversation
        return newConversation;
      });
    }
  };

  const {
    transcript, // Transcription accumul√©e par le hook (morceaux finaux)
    interimTranscript, // Transcription interm√©diaire actuelle
    isListening,
    startListening,
    stopListening,
    error: speechError,
    browserSupportsSpeechRecognition
  } = useSpeechRecognition({ onResult: handleSpeechResult });

  const handleSelectScenario = (scenario: Scenario) => {
    setSelectedScenario(scenario);
    setConversation([]); // R√©initialiser la conversation si le sc√©nario change
    setIsSimulationRunning(false); // Arr√™ter la simulation si en cours
    if (isListening) stopListening(); // Arr√™ter l'√©coute si en cours
    console.log("Sc√©nario s√©lectionn√©:", scenario.title);
  };

  // G√©rer le d√©marrage/arr√™t de la simulation et de l'√©coute
  const toggleSimulationAndListening = () => {
    if (!selectedScenario) {
      alert("Veuillez d'abord s√©lectionner un sc√©nario.");
      return;
    }

    if (isListening) { // Si on √©coute, on arr√™te
      stopListening();
      // On pourrait consid√©rer que la simulation s'arr√™te ici ou apr√®s la r√©ponse de l'IA
      // setIsSimulationRunning(false); // Pour l'instant, on arr√™te l'√©coute seulement
    } else { // Si on n'√©coute pas, on commence
      setConversation([]); // R√©initialiser la conversation √† chaque nouveau d√©marrage de simulation
      startListening();
      setIsSimulationRunning(true); // Marquer la simulation comme active
    }
  };
  
  // Afficher un message d'erreur si la reconnaissance vocale n'est pas support√©e
  useEffect(() => {
    if (!browserSupportsSpeechRecognition && !speechError) { // Afficher seulement si pas d√©j√† une autre erreur de speech
      alert("La reconnaissance vocale n'est pas support√©e par votre navigateur. Veuillez essayer avec Chrome ou Edge.");
    }
  }, [browserSupportsSpeechRecognition, speechError]);

  return (
    <div className="app-container">
      {apiError && <p style={{ color: 'orange', textAlign: 'center' }}>Erreur API: {apiError}</p>}
      {speechError && <p style={{ color: 'red', textAlign: 'center' }}>{speechError}</p>}
      <header>
        <h1>CoachSales AI</h1>
      </header>
      <main>
        <section id="scenario-selection" className="app-section">
          <h2>Section 1: Choisir un sc√©nario</h2>
          <ScenarioSelection 
            scenarios={scenarios}
            selectedScenario={selectedScenario}
            onSelectScenario={handleSelectScenario}
          />
        </section>

        <section id="simulation-start" className="app-section">
          <h2>Section 2: D√©marrer la simulation</h2>
          <SimulationControls 
            onToggleListening={toggleSimulationAndListening} 
            isListening={isListening}
            disabled={!selectedScenario || !browserSupportsSpeechRecognition || isAiResponding} 
          />
          {isAiResponding && <p className="placeholder-text" style={{textAlign: 'center', marginTop: '10px'}}>ü§ñ L'IA r√©fl√©chit...</p>}
        </section>

        <section id="conversation-display" className="app-section">
          <h2>Section 3: Affichage de la conversation en direct</h2>
          <ConversationView 
            messages={conversation}
            interimTranscript={interimTranscript}
          />
        </section>

        <section id="results-display" className="app-section">
          <h2>Section 4: R√©sultats</h2>
          <ResultsView />
        </section>
      </main>
      <footer>
        <p>&copy; {new Date().getFullYear()} CoachSales AI</p>
      </footer>
    </div>
  );
}

export default App;
// Suppression de l'accolade fermante en trop qui correspondait √† la premi√®re d√©claration erron√©e de function App()
